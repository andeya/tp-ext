// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: format.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		format.proto

	It has these top-level messages:
		Format
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Format struct {
	Seq       uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Ptype     int32  `protobuf:"varint,2,opt,name=ptype,proto3" json:"ptype,omitempty"`
	Uri       string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Meta      []byte `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	BodyCodec int32  `protobuf:"varint,5,opt,name=body_codec,json=bodyCodec,proto3" json:"body_codec,omitempty"`
	Body      []byte `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	XferPipe  []byte `protobuf:"bytes,7,opt,name=xfer_pipe,json=xferPipe,proto3" json:"xfer_pipe,omitempty"`
}

func (m *Format) Reset()                    { *m = Format{} }
func (m *Format) String() string            { return proto.CompactTextString(m) }
func (*Format) ProtoMessage()               {}
func (*Format) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{0} }

func (m *Format) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Format) GetPtype() int32 {
	if m != nil {
		return m.Ptype
	}
	return 0
}

func (m *Format) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Format) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Format) GetBodyCodec() int32 {
	if m != nil {
		return m.BodyCodec
	}
	return 0
}

func (m *Format) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Format) GetXferPipe() []byte {
	if m != nil {
		return m.XferPipe
	}
	return nil
}

func init() {
	proto.RegisterType((*Format)(nil), "pb.format")
}
func (m *Format) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Format) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Seq))
	}
	if m.Ptype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Ptype))
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if m.BodyCodec != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.BodyCodec))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.XferPipe) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.XferPipe)))
		i += copy(dAtA[i:], m.XferPipe)
	}
	return i, nil
}

func encodeFixed64Format(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Format(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFormat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Format) Size() (n int) {
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovFormat(uint64(m.Seq))
	}
	if m.Ptype != 0 {
		n += 1 + sovFormat(uint64(m.Ptype))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.BodyCodec != 0 {
		n += 1 + sovFormat(uint64(m.BodyCodec))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	l = len(m.XferPipe)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	return n
}

func sovFormat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFormat(x uint64) (n int) {
	return sovFormat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Format) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: format: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: format: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyCodec", wireType)
			}
			m.BodyCodec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodyCodec |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XferPipe", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XferPipe = append(m.XferPipe[:0], dAtA[iNdEx:postIndex]...)
			if m.XferPipe == nil {
				m.XferPipe = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFormat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFormat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFormat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFormat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFormat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFormat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("format.proto", fileDescriptorFormat) }

var fileDescriptorFormat = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcb, 0x2f, 0xca,
	0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x5a, 0xc6, 0xc8,
	0xc5, 0x06, 0x11, 0x14, 0x12, 0xe0, 0x62, 0x2e, 0x4e, 0x2d, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x09, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0x0b, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x14, 0x18,
	0x35, 0x58, 0x83, 0x20, 0x1c, 0x90, 0xba, 0xd2, 0xa2, 0x4c, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x10, 0x53, 0x48, 0x88, 0x8b, 0x25, 0x37, 0xb5, 0x24, 0x51, 0x82, 0x45, 0x81, 0x51, 0x83,
	0x27, 0x08, 0xcc, 0x16, 0x92, 0xe5, 0xe2, 0x4a, 0xca, 0x4f, 0xa9, 0x8c, 0x4f, 0xce, 0x4f, 0x49,
	0x4d, 0x96, 0x60, 0x05, 0x1b, 0xc0, 0x09, 0x12, 0x71, 0x06, 0x09, 0x80, 0xb4, 0x80, 0x38, 0x12,
	0x6c, 0x10, 0x2d, 0x20, 0xb6, 0x90, 0x34, 0x17, 0x67, 0x45, 0x5a, 0x6a, 0x51, 0x7c, 0x41, 0x66,
	0x41, 0xaa, 0x04, 0x3b, 0x58, 0x82, 0x03, 0x24, 0x10, 0x90, 0x59, 0x90, 0xea, 0x24, 0x70, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x90,
	0xc4, 0x06, 0xf6, 0x85, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x2d, 0x36, 0x93, 0xd5, 0x00,
	0x00, 0x00,
}
